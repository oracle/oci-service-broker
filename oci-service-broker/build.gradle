/*
 * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
 * Licensed under the Universal Permissive License v 1.0 as shown at http://oss.oracle.com/licenses/upl.
 */

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.17.2")
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
    }
}

plugins {
    id "com.github.hierynomus.license" version "0.15.0"
    id "com.github.spotbugs" version "2.0.0"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'com.palantir.docker'
apply plugin: 'maven-publish'

archivesBaseName = 'oci-service-broker'

// Sometimes, the version has to be overridden from command line
version = project.hasProperty('version_num') ? project.getProperty('version_num') : '1.5.2'
ext.dockerGroup = 'iad.ocir.io/oci-cnp-dev'
mainClassName = 'com.oracle.oci.osb.Broker'

sourceCompatibility = 10

ext {
    ociSdkVersion = "1.28.0"
    jerseyVersion = "2.32"
    hk2Version = "2.5.0-b42"
    hamcrestVersion = "1.3"
    jacksonVersion = "2.11.3";
    jacksonDatabindVersion = "2.11.3";
    javaxwsrsVersion = "2.1.1"
    bedrockVersion = "5.0.7"
    jetcdVersion = "0.3.0"
    guvaVersion = "27.1-jre"
    srcBuildRepo = project.hasProperty('src_build_repo') ? project.getProperty('src_build_repo') : "${projectDir}/src-build-repo/"
    unbundleOciSdk = project.hasProperty('unbundle_oci_java_sdk') ? project.getProperty('unbundle_oci_java_sdk').toBoolean() : false
    depLibJarPath = "build/lib"
}

repositories {
    mavenCentral()
}

configurations.all {
    resolutionStrategy {
        force "com.oracle.oci.sdk:oci-java-sdk-common:$ociSdkVersion"
        force "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
        force "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
        force "com.fasterxml.jackson.core:jackson-databind:$jacksonDatabindVersion"
        force "javax.ws.rs:javax.ws.rs-api:$javaxwsrsVersion"
        force "com.google.guava:guava:$guvaVersion"
    }
}

dependencies {

    //oci-java-sdk is not published to any public maven repo yet. In order to build the the project users are required
    //to download oci-java-sdk and the dependent libraries to libs directory. Please run script download_SDK_libs.sh
    //before build.
    compile fileTree(dir: 'libs', include: ['*.jar'], exclude: ['animal-sniffer-annotations-1.14.jar','guava-25.0-android.jar','javax.ws.rs-api-2.1.jar','checker-compat-qual-2.0.0.jar','error_prone_annotations-2.1.3.jar'])

    compile("com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion");
    compile("com.fasterxml.jackson.core:jackson-core:$jacksonVersion");
    compile("com.fasterxml.jackson.core:jackson-databind:$jacksonDatabindVersion")

    compile("org.glassfish.hk2:hk2-api:$hk2Version")
    compile("org.glassfish.hk2:hk2-utils:$hk2Version")

    compile("org.glassfish.jersey.containers:jersey-container-jdk-http:$jerseyVersion")
    compile("org.glassfish.jersey.core:jersey-common:$jerseyVersion")
    compile("org.glassfish.jersey.core:jersey-server:$jerseyVersion")
    compile("org.glassfish.jersey.media:jersey-media-json-jackson:$jerseyVersion")

    compile("javax.inject:javax.inject:1")
    compile("javax.validation:validation-api:1.1.0.Final")

    compile("javax.activation:activation:1.1.1")
    compile("javax.ws.rs:javax.ws.rs-api:$javaxwsrsVersion")
    compile("javax.xml.bind:jaxb-api:2.3.0")
    compile("com.google.guava:guava:$guvaVersion")
    compile("io.etcd:jetcd-core:$jetcdVersion")
    compile("io.netty:netty-tcnative:2.0.20.Final:linux-x86_64")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'oci-service-broker'
            groupId = 'com.oracle.oci.osb'
            from components.java
        }
    }
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
      html {
        enabled = true
      }
      xml {
        enabled = false
      }
    }
}

tasks.withType(Test) {
    systemProperties System.properties
    project.properties['exclude_tests']?.replaceAll('\\s', '')?.split('[,;]').each {
        exclude "**/${it}.class"
    }
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
}

task copyDependencies(type: Copy) {
  from configurations.runtime
  into 'build/lib'
}

task copyArchive(type: Copy) {
  from jar
  into 'build/lib'
}

task licenseFormatJava(type: com.hierynomus.gradle.license.tasks.LicenseCheck) {
    source = fileTree(dir: "src/").include("**/*.java")
}

task licenseFormatYaml(type: com.hierynomus.gradle.license.tasks.LicenseCheck) {
    source = fileTree(dir: "src/").include("**/*.yaml")
}

licenseFormatJava.header = file('copyright-files/copyright_java_style')
licenseFormatYaml.header = file('copyright-files/copyright_script_style')

// the main license tasks licenseMain and licenseTest needs not check any files, all file 
// checking will be done by the abve tasks licenseFormatJava and licenseFormatYaml. It is 
// not possible to have multipe types of license files for a single task, so a single task
// like licenseMain will not wotk if the source folder has multiple types of files
// in order to work around this, we have created couple of specific tasks which operates
// on similr kind of file and almost disabled the original tasks licenseMain and licenseTest
licenseMain.exclude "**/*.*"
licenseTest.exclude "**/*.*"
licenseMain.header = file('copyright-files/copyright_java_style')
licenseTest.header = file('copyright-files/copyright_java_style')


if (project.hasProperty("dockerGroup")) {
    ext.dockerImageTag = "${dockerGroup}/oci-service-broker:${version}"
} else {
    ext.dockerImageTag = "oci-service-broker:${version}"
}
build.finalizedBy copyDependencies
build.finalizedBy copyArchive

docker {
    name "${dockerImageTag}"
    dependsOn build
    if (System.getenv('https_proxy') != null && System.getenv('http_proxy') != null) {
    	buildArgs([https_proxy: System.getenv('https_proxy'), http_proxy:System.getenv('http_proxy')])
    }
    dockerfile file('deploy/docker/Dockerfile')
    files "deploy/scripts/start-broker.sh"
    files "deploy/scripts/install_openssl.sh"
    if(unbundleOciSdk) {
       println 'Unbundle OCI Java SDK'
       copySpec.from(depLibJarPath).exclude("oci-java-sdk*.jar")
    } else {
        println 'Bundle OCI Java SDK'
        copySpec.from(depLibJarPath)
    }
}



// SCA Gradle adapter settings

apply plugin: 'java'
allprojects {
   tasks.withType(JavaCompile) {
     task->
       task.options.compilerArgs << '-parameters'
       task.options.fork = true
       task.options.forkOptions.executable = 'javac'
 }
}
